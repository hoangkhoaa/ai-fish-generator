package fish

import (
	"fmt"
	"strings"
)

// Rarity represents the rarity level of a fish
type Rarity string

const (
	Common    Rarity = "Common"
	Uncommon  Rarity = "Uncommon"
	Rare      Rarity = "Rare"
	Epic      Rarity = "Epic"
	Legendary Rarity = "Legendary"
)

// Fish represents a fish species with its characteristics
type Fish struct {
	Name             string      `json:"name"`
	Rarity           Rarity      `json:"rarity"`
	Size             float64     `json:"size"`  // in meters
	Value            float64     `json:"value"` // in USD
	Description      string      `json:"description"`
	Effect           string      `json:"effect"`            // Human-readable effect description
	DataSource       string      `json:"data_source"`       // what data source influenced this fish
	IsAIGenerated    bool        `json:"is_ai_generated"`   // whether this fish was generated by AI
	StatEffects      StatEffects `json:"stat_effects"`      // Specific effects on game stats
	GenerationReason string      `json:"generation_reason"` // why this fish was generated
}

// NewFish creates a new fish with the given characteristics
func NewFish(name string, rarity Rarity, size, value float64, description, effect, dataSource string, reason string) *Fish {
	// Determine if this is an AI-generated fish
	isAIGenerated := dataSource == "news-ai"

	// Generate balanced stat effects based on rarity and data source
	statEffects := GenerateBalancedEffects(rarity, dataSource, isAIGenerated)

	return &Fish{
		Name:             name,
		Rarity:           rarity,
		Size:             size,
		Value:            value,
		Description:      description,
		Effect:           effect,
		DataSource:       dataSource,
		IsAIGenerated:    isAIGenerated,
		StatEffects:      statEffects,
		GenerationReason: reason,
	}
}

// GetFishReport returns a formatted report for a single fish
func (f *Fish) GetFishReport() string {
	var sb strings.Builder

	// Determine source type and prepare header
	var headerStyle, sourceLabel string

	if f.IsAIGenerated {
		// AI-generated fish gets special formatting
		headerStyle = "==== ðŸ¤– AI-GENERATED FISH ðŸ¤– ===="
		sourceLabel = "AI (Gemma Model)"
	} else {
		// Rule-based fish
		headerStyle = "==== RULE-BASED GENERATED FISH ===="
		sourceLabel = f.DataSource
	}

	sb.WriteString(headerStyle + "\n")
	sb.WriteString(fmt.Sprintf("Name: %s\n", f.Name))
	sb.WriteString(fmt.Sprintf("Rarity: %s\n", f.Rarity))
	sb.WriteString(fmt.Sprintf("Size: %.2f meters\n", f.Size))
	sb.WriteString(fmt.Sprintf("Value: $%.2f\n", f.Value))
	sb.WriteString(fmt.Sprintf("Source: %s\n", sourceLabel))
	sb.WriteString(fmt.Sprintf("Generated due to: %s\n", f.GenerationReason))
	sb.WriteString(fmt.Sprintf("Description: %s\n", f.Description))
	sb.WriteString(fmt.Sprintf("Effect: %s\n", f.Effect))
	sb.WriteString(fmt.Sprintf("Game Stats: %s\n", FormatEffects(f.StatEffects)))

	// Add bottom border that matches the header
	sb.WriteString(strings.Repeat("=", len(headerStyle)) + "\n")

	return sb.String()
}
